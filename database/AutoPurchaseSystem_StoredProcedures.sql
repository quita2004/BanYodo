USE AUTO_PURCHASE_SYSTEM;
GO

-- SP_CLIENT_PRELOGIN
CREATE OR ALTER PROCEDURE SP_CLIENT_PRELOGIN
    @MACHINE_ID NVARCHAR(255),
    @LICENSE_KEY NVARCHAR(50)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @CLIENT_ID UNIQUEIDENTIFIER;
    DECLARE @LICENSE_ID UNIQUEIDENTIFIER;

    SELECT @CLIENT_ID = CLIENT_ID FROM T_CLIENTS WHERE MACHINE_ID = @MACHINE_ID;

    IF @CLIENT_ID IS NULL
    BEGIN
        DECLARE @NEW_CLIENT TABLE (ID UNIQUEIDENTIFIER);
        INSERT INTO T_CLIENTS (MACHINE_ID)
        OUTPUT inserted.CLIENT_ID INTO @NEW_CLIENT
        VALUES (@MACHINE_ID);
        SELECT @CLIENT_ID = ID FROM @NEW_CLIENT;
    END

    SELECT @LICENSE_ID = LICENSE_ID FROM T_LICENSES WHERE LICENSE_KEY = @LICENSE_KEY;

    IF @LICENSE_ID IS NULL
    BEGIN
        RAISERROR('LICENSE KHÔNG TỒN TẠI', 16, 1);
        RETURN;
    END

    IF EXISTS (SELECT 1 FROM T_LICENSES WHERE LICENSE_ID = @LICENSE_ID AND EXPIRED_AT < GETDATE())
    BEGIN
        RAISERROR('LICENSE ĐÃ HẾT HẠN', 16, 1);
        RETURN;
    END

    MERGE T_LICENSE_ASSIGNMENTS AS TARGET
    USING (SELECT @LICENSE_ID AS LICENSE_ID, @CLIENT_ID AS CLIENT_ID) AS SOURCE
    ON TARGET.LICENSE_ID = SOURCE.LICENSE_ID AND TARGET.CLIENT_ID = SOURCE.CLIENT_ID
    WHEN MATCHED THEN
        UPDATE SET IS_LOGGED_IN = 1, LAST_LOGIN_AT = GETDATE()
    WHEN NOT MATCHED THEN
        INSERT (LICENSE_ID, CLIENT_ID, IS_LOGGED_IN, ASSIGNED_AT)
        VALUES (@LICENSE_ID, @CLIENT_ID, 1, GETDATE());
END
GO

-- SP_CLIENT_SEND_SCHEDULE
CREATE OR ALTER PROCEDURE SP_CLIENT_SEND_SCHEDULE
    @CLIENT_ID UNIQUEIDENTIFIER,
    @PRODUCT_ID NVARCHAR(100),
    @QUANTITY INT,
    @PURCHASE_TIME DATETIME,
    @COOKIE NVARCHAR(MAX),
    @PROXY_ID UNIQUEIDENTIFIER = NULL
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO T_PURCHASE_SCHEDULES (CLIENT_ID, PRODUCT_ID, QUANTITY, PURCHASE_TIME, COOKIE, PROXY_ID)
    VALUES (@CLIENT_ID, @PRODUCT_ID, @QUANTITY, @PURCHASE_TIME, @COOKIE, @PROXY_ID);
END
GO

-- SP_GET_PURCHASE_STATUS
CREATE OR ALTER PROCEDURE SP_GET_PURCHASE_STATUS
    @SCHEDULE_ID UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;
    SELECT * FROM T_PURCHASE_RESULTS WHERE SCHEDULE_ID = @SCHEDULE_ID;
END
GO

-- SP_ADMIN_ADD_LICENSE
CREATE OR ALTER PROCEDURE SP_ADMIN_ADD_LICENSE
    @LICENSE_KEY NVARCHAR(50),
    @EXPIRED_AT DATETIME
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO T_LICENSES (LICENSE_KEY, EXPIRED_AT) VALUES (@LICENSE_KEY, @EXPIRED_AT);
END
GO

-- SP_ADMIN_UPDATE_LICENSE
CREATE OR ALTER PROCEDURE SP_ADMIN_UPDATE_LICENSE
    @LICENSE_ID UNIQUEIDENTIFIER,
    @EXPIRED_AT DATETIME,
    @IS_ACTIVE BIT
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE T_LICENSES SET EXPIRED_AT = @EXPIRED_AT, IS_ACTIVE = @IS_ACTIVE WHERE LICENSE_ID = @LICENSE_ID;
END
GO

-- SP_ADMIN_DELETE_LICENSE
CREATE OR ALTER PROCEDURE SP_ADMIN_DELETE_LICENSE
    @LICENSE_ID UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;
    DELETE FROM T_LICENSES WHERE LICENSE_ID = @LICENSE_ID;
END
GO

-- SP_ADMIN_LIST_LICENSES
CREATE OR ALTER PROCEDURE SP_ADMIN_LIST_LICENSES
AS
BEGIN
    SET NOCOUNT ON;
    SELECT * FROM T_LICENSES;
END
GO
